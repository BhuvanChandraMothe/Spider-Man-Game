import os

class File():
    def __init__(self, path):
        self.path = str(path)

    def getMaxSize(self, index):
        largest_files = []
        max_size = 0

        for dirpath, dirnames, files in os.walk(self.path):
            for file in files:
                file_path = os.path.join(dirpath, file)
                file_size = os.path.getsize(file_path)

                if file_size > max_size:
                    max_size = file_size
                    largest_files.append(file)

        # Sort by size in descending order
        largest_files = sorted(largest_files, key=lambda x: os.path.getsize(os.path.join(self.path, x)), reverse=True)
        return largest_files[:index]

# Example Usage
fs = File(".")  # Assuming the current directory
print(fs.getMaxSize(2))  # Returns the two largest files


import os

class File:
    def __init__(self, directory):
        self.directory = directory

    def getMaxSizeFile(self, n):
        files = [(f, os.path.getsize(os.path.join(self.directory, f))) 
                 for f in os.listdir(self.directory) if os.path.isfile(os.path.join(self.directory, f))]
        files.sort(key=lambda x: x[1], reverse=True)  # Sort by size (descending)
        return [f[0] for f in files[:n]]

# Testing
fs = File(".")
print(fs.getMaxSizeFile(2))  # Prints the two largest files


import datetime

class File:
    def __init__(self, directory):
        self.directory = directory

    def getLatestFiles(self, date):
        files = [(f, os.path.getmtime(os.path.join(self.directory, f))) 
                 for f in os.listdir(self.directory) if os.path.isfile(os.path.join(self.directory, f))]
        date_timestamp = datetime.datetime(date.year, date.month, date.day).timestamp()
        latest_files = [f[0] for f in files if f[1] > date_timestamp]
        return latest_files

# Testing
fs = File(".")
print(fs.getLatestFiles(datetime.date(2018,2,1)))  # Files modified after Feb 1, 2018
